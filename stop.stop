IdExpr = type(value);
NumExpr = type(value);
StrExpr = type(value);
ListExpr = type(values);
BinExpr = type(kind, left, right);
MemberExpr = type(expr, id);
AssignExpr = type(lval, expr);
SeqExpr = type(left, right);
MatchExpr = type(expr, mrules);
FnExpr = type(ids, expr);
AppExpr = type(expr, args);
TypeExpr = type(fields);

MRule = type(pat, expr);

IdPat = type(value);
NumPat = type(value);
StrPat = type(value);
TypePat = type(id, fields);

TypePatField = type(key, pat);


recast = require('recast');
b = recast.types.builders;

globals = type(nextVar, nextLabel)(0, 0);

translate = fn(ast) -> (
  p = b.program(translateBlock(ast));
  recast.print(p).code
);

translateBlock = fn(expr) -> (
  vars = [];
  stmts = [];
  expr = translateExpr(vars, stmts, expr);
  vars.forEach(fn(id) -> (
    declarator = b.variableDeclarator(b.identifier(id), null);
    stmts.unshift(b.variableDeclaration('var', [declarator]))
  ));
  stmts.push(b.expressionStatement(expr));
  stmts
);

translateExpr = fn(vars, stmts, expr) -> match expr of
    IdExpr(value=idvalue) -> b.identifier(idvalue)
  | NumExpr(value=numvalue) -> b.literal(numvalue)
  | StrExpr(value=strvalue) -> b.literal(strvalue)
  | ListExpr(values=listvalues) -> b.arrayExpression(
      listvalues.map(fn(listvalue) -> translateExpr(vars, stmts, listvalue))
    )
  | BinExpr(kind=bink, left=binl, right=binr) -> (
      binleft = translateExpr(vars, stmts, binl);
      binright = translateExpr(vars, stmts, binr);
      b.binaryExpression(bink, binleft, binright)
    )
  | MemberExpr(expr=e, id=i) -> (
      e = translateExpr(vars, stmts, e);
      b.memberExpression(e, b.identifier(i))
    )
  | AssignExpr(lval=l, expr=e) -> (
      'FIXME: Only push var if it is undeclared';
      match l of IdExpr() -> vars.push(l.value) end;
      lval = translateExpr(vars, stmts, l);
      expr = translateExpr(vars, stmts, e);
      b.assignmentExpression('=', lval, expr)
    )
  | SeqExpr(left=seql, right=seqr) -> (
      seqe = translateExpr(vars, stmts, seql);
      stmts.push(b.expressionStatement(seqe));
      translateExpr(vars, stmts, seqr)
    )
  | MatchExpr(expr=e, mrules=m) -> (
      result = '$' + globals.nextVar;
      vars.push(result);
      globals.nextVar = globals.nextVar + 1;
      value = '$' + globals.nextVar;
      vars.push(value);
      globals.nextVar = globals.nextVar + 1;
      label = b.identifier('label' + globals.nextLabel);
      globals.nextLabel = globals.nextLabel + 1;
      mstmts = [];
      v = translateExpr(vars, mstmts, e);
      mstmts.push(b.expressionStatement(b.assignmentExpression('=', b.identifier(value), v)));
      m.forEach(fn(mrule) -> (
        bstmts = translatePat(vars, mstmts, b.identifier(value), mrule.pat);
        e = translateExpr(vars, bstmts, mrule.expr);
        bstmts.push(b.expressionStatement(b.assignmentExpression('=', b.identifier(result), e)));
        bstmts.push(b.breakStatement(label))
      ));
      stmts.push(b.labeledStatement(label, b.blockStatement(mstmts)));
      b.identifier(result)
    )
  | FnExpr(ids=i, expr=e) -> (
      bstmts = translateBlock(e);
      stmt = bstmts.pop();
      bstmts.push(b.returnStatement(stmt.expression));
      b.functionExpression(null, i.map(fn(id) -> b.identifier(id)), b.blockStatement(bstmts))
    )
  | AppExpr(expr=e, args=a) -> (
      f = translateExpr(vars, stmts, e);
      args = a.map(fn(arg) -> translateExpr(vars, stmts, arg));
      b.callExpression(f, args)
    )
  | TypeExpr(fields=f) -> (
      ids = f.map(fn(id) -> b.identifier(id));
      assignments = ids.map(fn(id) -> b.expressionStatement(
        b.assignmentExpression('=', b.memberExpression(b.thisExpression(), id), id)
      ));
      cond = b.binaryExpression('instanceof', b.thisExpression(), b.identifier('type'));
      b.functionExpression(b.identifier('type'), ids, b.blockStatement([
        b.ifStatement(
          cond,
          b.blockStatement(assignments),
          b.blockStatement([b.returnStatement(b.newExpression(b.identifier('type'), ids))])
         )
      ]))
    )
  | e -> ('Unknown expression: ' + JSON.stringify(e, null, 4))
end;

translatePat = fn(vars, stmts, expr, pat) -> match pat of
    IdPat(value=v) -> (
      vars.push(v);
      stmts.push(b.expressionStatement(b.assignmentExpression('=', b.identifier(v), expr)));
      stmts
    )
  | NumPat(value=v) -> (
      bstmts = [];
      cond = b.binaryExpression('===', expr, b.literal(v));
      stmts.push(b.ifStatement(cond, b.blockStatement(bstmts)));
      bstmts
    )
  | StrPat(value=v) -> (
      bstmts = [];
      cond = b.binaryExpression('===', expr, b.literal(v));
      stmts.push(b.ifStatement(cond, b.blockStatement(bstmts)));
      bstmts
    )
  | TypePat(id=i, fields=f) -> (
      Body = type(stmts);
      body = Body([]);
      cond = b.binaryExpression('instanceof', expr, b.identifier(i));
      stmts.push(b.ifStatement(cond, b.blockStatement(body.stmts)));
      f.forEach(fn(field) -> (
        body.stmts = translatePat(vars, body.stmts, b.memberExpression(expr, b.identifier(field.key)), field.pat)
      ));
      body.stmts
    )
  | _ -> 'Unknown pattern'
end;


p = require('./parser').parser;
p.yy.IdExpr = IdExpr;
p.yy.NumExpr = NumExpr;
p.yy.StrExpr = StrExpr;
p.yy.ListExpr = ListExpr;
p.yy.BinExpr = BinExpr;
p.yy.MemberExpr = MemberExpr;
p.yy.AssignExpr = AssignExpr;
p.yy.SeqExpr = SeqExpr;
p.yy.MatchExpr = MatchExpr;
p.yy.FnExpr = FnExpr;
p.yy.AppExpr = AppExpr;
p.yy.TypeExpr = TypeExpr;
p.yy.MRule = MRule;
p.yy.IdPat = IdPat;
p.yy.NumPat = NumPat;
p.yy.StrPat = StrPat;
p.yy.TypePat = TypePat;
p.yy.TypePatField = TypePatField;

fs = require('fs');
Options = type(encoding);
options = Options('utf-8');
input = fs.readFileSync('stop.stop', options);
ast = p.parse(input);
output = translate(ast);
console.log(output)
